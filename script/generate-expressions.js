import {promises as fs} from 'fs'
import path from 'path'
import regenerate from 'regenerate'
import ConnectorPunctuation from '@unicode/unicode-13.0.0/General_Category/Connector_Punctuation/code-points.js'
import DashPunctuation from '@unicode/unicode-13.0.0/General_Category/Dash_Punctuation/code-points.js'
import ClosePunctuation from '@unicode/unicode-13.0.0/General_Category/Close_Punctuation/code-points.js'
import FinalPunctuation from '@unicode/unicode-13.0.0/General_Category/Final_Punctuation/code-points.js'
import InitialPunctuation from '@unicode/unicode-13.0.0/General_Category/Initial_Punctuation/code-points.js'
import OtherPunctuation from '@unicode/unicode-13.0.0/General_Category/Other_Punctuation/code-points.js'
import OpenPunctuation from '@unicode/unicode-13.0.0/General_Category/Open_Punctuation/code-points.js'
import {codes} from '../lib/character/codes.js'

main()

async function main() {
  const pcAll = regenerate()
    .addRange(codes.exclamationMark, codes.slash)
    .addRange(codes.colon, codes.atSign)
    .addRange(codes.leftSquareBracket, codes.graveAccent)
    .addRange(codes.leftCurlyBrace, codes.tilde)
    .add(ConnectorPunctuation)
    .add(DashPunctuation)
    .add(ClosePunctuation)
    .add(FinalPunctuation)
    .add(InitialPunctuation)
    .add(OtherPunctuation)
    .add(OpenPunctuation)
    .valueOf()

  // Note: we donâ€™t support astrals.
  const pc = regenerate()
    .add(pcAll.filter((d) => d <= 0xffff))
    .toRegExp()

  await fs.writeFile(
    path.join('lib', 'constant', 'unicode-punctuation-regex.js'),
    [
      '// This module is generated by `script/`.',
      '//',
      '// CommonMark handles attention (emphasis, strong) markers based on what comes',
      '// before or after them.',
      '// One such difference is if those characters are Unicode punctuation.',
      '// This script is generated from the Unicode data.',
      'export const unicodePunctuationRegex = ' + pc,
      ''
    ].join('\n')
  )
}
